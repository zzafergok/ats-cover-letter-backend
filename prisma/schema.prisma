generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  emailVerifyToken  String?  @map("email_verify_token")
  emailVerifyExpires DateTime? @map("email_verify_expires")
  role              UserRole @default(USER)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  refreshTokens        RefreshToken[]
  cvUploads            CvUpload[]
  coverLetters         CoverLetter[]
  savedCvs             SavedCv[]
  stagedCoverLetters   StagedCoverLetter[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model CvUpload {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  fileName         String           @map("file_name")
  originalName     String           @map("original_name")
  filePath         String?          @map("file_path")
  fileUrl          String?          @map("file_url")
  extractedText    String?          @map("extracted_text")
  markdownContent  String?          @map("markdown_content")
  processingStatus ProcessingStatus @default(PENDING) @map("processing_status")
  extractedData    Json?            @map("extracted_data")
  fileData         Bytes?           @map("file_data")
  originalSize     Int?             @map("original_size")
  compressedSize   Int?             @map("compressed_size")
  compressionRatio Float?           @map("compression_ratio")
  uploadDate       DateTime         @default(now()) @map("upload_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_uploads")
}

model CoverLetter {
  id               String             @id @default(cuid())
  userId           String             @map("user_id")
  title            String
  content          String
  coverLetterType  CoverLetterType    @map("cover_letter_type")
  positionTitle    String             @map("position_title")
  companyName      String             @map("company_name")
  category         CoverLetterCategory @default(GENERAL)
  analysis         Json?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cover_letters")
}

model SavedCv {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  content   String
  cvType    CvType   @map("cv_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_cvs")
}

model StagedCoverLetter {
  id               String                    @id @default(cuid())
  userId           String                    @map("user_id")
  sessionId        String                    @map("session_id")
  
  // Stage 1: Basic Info (Required)
  positionTitle    String                    @map("position_title")
  companyName      String                    @map("company_name")
  experienceLevel  ExperienceLevel           @map("experience_level")
  keySkills        String[]                  @map("key_skills")
  
  // Stage 2: Optional Enhancement
  companyResearch  String?                   @map("company_research")
  achievements     String[]                  @default([])
  careerGoals      String?                   @map("career_goals")
  motivation       String?
  
  // Generated Content
  basicContent     String?                   @map("basic_content")
  enhancedContent  String?                   @map("enhanced_content")
  
  // Status
  stage            CoverLetterStage          @default(BASIC_INFO)
  isCompleted      Boolean                   @default(false) @map("is_completed")
  
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staged_cover_letters")
}

enum CoverLetterType {
  PROFESSIONAL 
  CREATIVE 
  TECHNICAL 
  ENTRY_LEVEL
}

enum UserRole {
  USER
  ADMIN
}

enum CvType {
  ATS_OPTIMIZED
  CREATIVE
  TECHNICAL
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CoverLetterCategory {
  SOFTWARE_DEVELOPER
  MARKETING_SPECIALIST
  SALES_REPRESENTATIVE
  PROJECT_MANAGER
  DATA_ANALYST
  UI_UX_DESIGNER
  BUSINESS_ANALYST
  CUSTOMER_SERVICE
  HR_SPECIALIST
  FINANCE_SPECIALIST
  CONTENT_WRITER
  DIGITAL_MARKETING
  PRODUCT_MANAGER
  QUALITY_ASSURANCE
  GRAPHIC_DESIGNER
  ADMINISTRATIVE_ASSISTANT
  CONSULTANT
  ENGINEER
  TEACHER
  HEALTHCARE
  LEGAL
  GENERAL
}

enum ExperienceLevel {
  NEW_GRADUATE
  JUNIOR
  MID_LEVEL
  SENIOR
}

enum CoverLetterStage {
  BASIC_INFO
  ENHANCEMENT
  COMPLETED
}