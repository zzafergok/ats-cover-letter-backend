generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  emailVerifyToken  String?  @map("email_verify_token")
  emailVerifyExpires DateTime? @map("email_verify_expires")
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  role              UserRole @default(USER)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  refreshTokens        RefreshToken[]
  cvUploads            CvUpload[]
  savedCvs             SavedCv[]
  coverLetterBasics    CoverLetterBasic[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model CvUpload {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  fileName         String           @map("file_name")
  originalName     String           @map("original_name")
  filePath         String?          @map("file_path")
  fileUrl          String?          @map("file_url")
  extractedText    String?          @map("extracted_text")
  markdownContent  String?          @map("markdown_content")
  processingStatus ProcessingStatus @default(PENDING) @map("processing_status")
  extractedData    Json?            @map("extracted_data")
  fileData         Bytes?           @map("file_data")
  originalSize     Int?             @map("original_size")
  compressedSize   Int?             @map("compressed_size")
  compressionRatio Float?           @map("compression_ratio")
  uploadDate       DateTime         @default(now()) @map("upload_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_uploads")
}


model SavedCv {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  content   String
  cvType    CvType   @map("cv_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_cvs")
}


model CoverLetterBasic {
  id               String                    @id @default(cuid())
  userId           String                    @map("user_id")
  cvUploadId       String                    @map("cv_upload_id")
  
  // Job Information
  positionTitle    String                    @map("position_title")
  companyName      String                    @map("company_name")
  jobDescription   String                    @map("job_description")
  
  // Generated Content
  generatedContent String?                   @map("generated_content")
  updatedContent   String?                   @map("updated_content")
  
  // Status
  generationStatus ProcessingStatus          @default(PENDING) @map("generation_status")
  
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cover_letter_basics")
}


enum UserRole {
  USER
  ADMIN
}

enum CvType {
  ATS_OPTIMIZED
  CREATIVE
  TECHNICAL
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}


