generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  emailVerifyToken  String?  @map("email_verify_token")
  emailVerifyExpires DateTime? @map("email_verify_expires")
  passwordResetToken String? @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  role              UserRole @default(USER)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Detailed Profile Information
  phone             String?  
  address           String?  
  city              String?  
  github            String?  
  linkedin          String?  
  portfolioWebsite  String?  @map("portfolio_website")
  aboutMe           String?  @map("about_me")
  profileCompleted  Boolean  @default(false) @map("profile_completed")
  avatarColor       String?  @default("#3B82F6") @map("avatar_color")

  refreshTokens         RefreshToken[]
  cvUploads            CvUpload[]
  savedCvs             SavedCv[]
  coverLetterBasics    CoverLetterBasic[]
  coverLetterDetailed  CoverLetterDetailed[]
  atsCvs               AtsCv[]
  generatedCvs         GeneratedCv[]
  educations           Education[]
  experiences          Experience[]
  courses              Course[]
  certificates         Certificate[]
  hobbies              Hobby[]
  skills               Skill[]
  
  // ATS Optimization Relations
  jobAnalyses          JobPostingAnalysis[]
  cvJobMatches         CVJobMatch[]
  atsOptimizations     ATSOptimization[]
  
  // Additional CV Enhancement Relations
  projects             Project[]
  languages            Language[]
  references           Reference[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model CvUpload {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  fileName         String           @map("file_name")
  originalName     String           @map("original_name")
  filePath         String?          @map("file_path")
  fileUrl          String?          @map("file_url")
  extractedText    String?          @map("extracted_text")
  markdownContent  String?          @map("markdown_content")
  processingStatus ProcessingStatus @default(PENDING) @map("processing_status")
  extractedData    Json?            @map("extracted_data")
  fileData         Bytes?           @map("file_data")
  originalSize     Int?             @map("original_size")
  compressedSize   Int?             @map("compressed_size")
  compressionRatio Float?           @map("compression_ratio")
  uploadDate       DateTime         @default(now()) @map("upload_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cv_uploads")
}


model SavedCv {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  title     String
  content   String
  cvType    CvType   @map("cv_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_cvs")
}


model CoverLetterBasic {
  id               String                    @id @default(cuid())
  userId           String                    @map("user_id")
  cvUploadId       String                    @map("cv_upload_id")
  
  // Job Information
  positionTitle    String                    @map("position_title")
  companyName      String                    @map("company_name")
  jobDescription   String                    @map("job_description")
  language         CoverLetterLanguage       @default(TURKISH)
  
  // Generated Content
  generatedContent String?                   @map("generated_content")
  updatedContent   String?                   @map("updated_content")
  
  // Status
  generationStatus ProcessingStatus          @default(PENDING) @map("generation_status")
  
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cover_letter_basics")
}

model CoverLetterDetailed {
  id               String                    @id @default(cuid())
  userId           String                    @map("user_id")
  
  // Job Information
  positionTitle    String                    @map("position_title")
  companyName      String                    @map("company_name")
  jobDescription   String                    @map("job_description")
  language         CoverLetterLanguage       @default(TURKISH)
  
  // Personal Motivation Questions
  whyPosition      String?                   @map("why_position")
  whyCompany       String?                   @map("why_company")
  workMotivation   String?                   @map("work_motivation")
  
  // Generated Content
  generatedContent String?                   @map("generated_content")
  updatedContent   String?                   @map("updated_content")
  
  // Status
  generationStatus ProcessingStatus          @default(PENDING) @map("generation_status")
  
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cover_letter_detailed")
}

model Education {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  schoolName    String      @map("school_name")
  degree        String?     
  fieldOfStudy  String?     @map("field_of_study")
  grade         Float?      
  gradeSystem   GradeSystem @map("grade_system")
  educationType EducationType? @map("education_type")
  startYear     Int         @map("start_year")
  endYear       Int?        @map("end_year")
  isCurrent     Boolean     @default(false) @map("is_current")
  description   String?     
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Experience {
  id            String         @id @default(cuid())
  userId        String         @map("user_id")
  companyName   String         @map("company_name")
  position      String         
  employmentType EmploymentType @map("employment_type")
  workMode      WorkMode       @map("work_mode")
  location      String?        
  startMonth    Int            @map("start_month")
  startYear     Int            @map("start_year")
  endMonth      Int?           @map("end_month")
  endYear       Int?           @map("end_year")
  isCurrent     Boolean        @default(false) @map("is_current")
  description   String?        
  achievements  String?        
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Course {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  courseName    String    @map("course_name")
  provider      String?   
  startMonth    Int?      @map("start_month")
  startYear     Int?      @map("start_year")
  endMonth      Int?      @map("end_month")
  endYear       Int?      @map("end_year")
  duration      String?   
  description   String?   
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("courses")
}

model Certificate {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  certificateName String  @map("certificate_name")
  issuer        String?   
  issueMonth    Int?      @map("issue_month")
  issueYear     Int?      @map("issue_year")
  expiryMonth   Int?      @map("expiry_month")
  expiryYear    Int?      @map("expiry_year")
  credentialId  String?   @map("credential_id")
  credentialUrl String?   @map("credential_url")
  description   String?   
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

model Hobby {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String   
  description String?  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("hobbies")
}

model Skill {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String    
  category    SkillCategory?
  level       SkillLevel?
  yearsOfExperience Int? @map("years_of_experience")
  description String?   
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model CoverLetterTemplate {
  id          String              @id @default(cuid())
  title       String
  content     String
  category    TemplateCategory
  language    CoverLetterLanguage @default(TURKISH)
  industry    TemplateIndustry
  description String?
  isActive    Boolean             @default(true) @map("is_active")
  sortOrder   Int                 @default(0) @map("sort_order")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  @@map("cover_letter_templates")
}

model AtsCv {
  id                  String          @id @default(cuid())
  userId              String          @map("user_id")
  
  // Personal Information (stored as JSON for flexibility)
  personalInfo        Json            @map("personal_info")
  
  // Professional Summary
  professionalSummary Json            @map("professional_summary")
  
  // Work Experience (array of experiences)
  workExperience      Json            @map("work_experience")
  
  // Education (array of education entries)
  education           Json            @map("education")
  
  // Skills (technical, languages, soft skills)
  skills              Json            
  
  // Optional sections
  certifications      Json?           
  projects            Json?           
  
  // Configuration
  configuration       Json            
  
  // Generated Content
  generatedContent    String?         @map("generated_content")
  pdfPath             String?         @map("pdf_path")
  
  // Metadata
  fileName            String?         @map("file_name")
  fileSize            Int?            @map("file_size")
  
  // Status
  generationStatus    ProcessingStatus @default(PENDING) @map("generation_status")
  
  createdAt           DateTime        @default(now()) @map("created_at")
  updatedAt           DateTime        @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ats_cvs")
}

model GeneratedCv {
  id               String           @id @default(cuid())
  userId           String           @map("user_id")
  templateType     String           @map("template_type")
  templateData     String           @map("template_data") // JSON string of template data
  pdfData          Bytes?           @map("pdf_data")
  generationStatus ProcessingStatus @default(PENDING) @map("generation_status")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generated_cvs")
}

enum TemplateCategory {
  SOFTWARE_DEVELOPER
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  FULLSTACK_DEVELOPER
  DATA_SCIENTIST
  FINANCIAL_ANALYST
  INVESTMENT_BANKER
  FINANCIAL_ADVISOR
  ACCOUNTING_SPECIALIST
  RISK_ANALYST
  NURSE
  DOCTOR
  PHARMACIST
  TEACHER
  ACADEMIC_ADMINISTRATOR
  MARKETING_SPECIALIST
}

enum TemplateIndustry {
  TECHNOLOGY
  FINANCE
  HEALTHCARE
  EDUCATION
  MARKETING
}

enum UserRole {
  USER
  ADMIN
}

enum CvType {
  ATS_OPTIMIZED
  CREATIVE
  TECHNICAL
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CoverLetterLanguage {
  TURKISH
  ENGLISH
}

enum GradeSystem {
  PERCENTAGE // 0-100 for high school
  GPA_4      // 0-4 for university
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  TEMPORARY
}

enum WorkMode {
  ONSITE
  REMOTE
  HYBRID
}

enum SkillCategory {
  TECHNICAL
  SOFT_SKILL
  LANGUAGE
  TOOL
  FRAMEWORK
  OTHER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EducationType {
  LISE
  ONLISANS
  LISANS
  YUKSEKLISANS
}

// ATS Optimization Models
model JobPostingAnalysis {
  id                    String                @id @default(cuid())
  userId                String                @map("user_id")
  
  // Raw Input
  jobPostingUrl         String?               @map("job_posting_url")
  jobPostingText        String                @map("job_posting_text") @db.Text
  companyName           String                @map("company_name")
  positionTitle         String                @map("position_title")
  
  // Extracted Information (stored as JSON for flexibility)
  requiredSkills        Json                  @map("required_skills")
  preferredSkills       Json                  @map("preferred_skills")
  requiredExperience    Json                  @map("required_experience")
  educationRequirements Json                  @map("education_requirements")
  keywords              Json                  
  
  // Job Details
  location              String?
  workMode              WorkMode?             @map("work_mode")
  employmentType        EmploymentType?       @map("employment_type")
  salaryRange           Json?                 @map("salary_range")
  
  // ATS Analysis
  atsKeywords           Json                  @map("ats_keywords")
  industryType          String?               @map("industry_type")
  seniorityLevel        SeniorityLevel?       @map("seniority_level")
  
  // Status
  analysisStatus        ProcessingStatus      @default(PENDING) @map("analysis_status")
  
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  cvJobMatches          CVJobMatch[]
  
  @@map("job_posting_analyses")
}

model CVJobMatch {
  id                    String                @id @default(cuid())
  userId                String                @map("user_id")
  jobAnalysisId         String                @map("job_analysis_id")
  
  // Overall Match Score (0-100)
  overallScore          Float                 @map("overall_score")
  
  // Detailed Scoring (stored as JSON)
  skillsMatch           Json                  @map("skills_match")
  experienceMatch       Json                  @map("experience_match")
  educationMatch        Json                  @map("education_match")
  keywordMatch          Json                  @map("keyword_match")
  
  // Gaps and Opportunities
  missingSkills         Json                  @map("missing_skills")
  missingKeywords       Json                  @map("missing_keywords")
  weakAreas             Json                  @map("weak_areas")
  strengthAreas         Json                  @map("strength_areas")
  
  // Recommendations
  recommendations       Json                  
  
  // CV Data used for analysis
  cvDataSnapshot        Json                  @map("cv_data_snapshot")
  
  // Status
  matchStatus           ProcessingStatus      @default(PENDING) @map("match_status")
  
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobAnalysis           JobPostingAnalysis    @relation(fields: [jobAnalysisId], references: [id], onDelete: Cascade)
  atsOptimizations      ATSOptimization[]
  
  @@map("cv_job_matches")
}

model ATSOptimization {
  id                    String                @id @default(cuid())
  userId                String                @map("user_id")
  matchAnalysisId       String                @map("match_analysis_id")
  
  // Optimization Configuration
  optimizationLevel     OptimizationLevel     @map("optimization_level")
  targetSections        Json                  @map("target_sections")
  preserveOriginal      Boolean               @default(true) @map("preserve_original")
  
  // Original and Optimized CV Data
  originalCV            Json                  @map("original_cv")
  optimizedCV           Json                  @map("optimized_cv")
  
  // Optimization Changes
  changes               Json                  // Array of OptimizationChange objects
  addedKeywords         Json                  @map("added_keywords")
  enhancedSections      Json                  @map("enhanced_sections")
  
  // Improvement Metrics
  beforeScore           Float                 @map("before_score")
  afterScore            Float                 @map("after_score")
  improvementPercentage Float                 @map("improvement_percentage")
  
  // ATS Compliance
  atsCompliance         Json                  @map("ats_compliance")
  
  // Generated Files
  pdfPath               String?               @map("pdf_path")
  fileName              String?               @map("file_name")
  fileSize              Int?                  @map("file_size")
  
  // Status
  optimizationStatus    ProcessingStatus      @default(PENDING) @map("optimization_status")
  
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")

  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchAnalysis         CVJobMatch            @relation(fields: [matchAnalysisId], references: [id], onDelete: Cascade)
  
  @@map("ats_optimizations")
}

// Additional Project model for CV enhancement
model Project {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  name          String    
  description   String    @db.Text
  technologies  String    
  link          String?   
  startMonth    Int?      @map("start_month")
  startYear     Int?      @map("start_year")
  endMonth      Int?      @map("end_month")
  endYear       Int?      @map("end_year")
  isCurrent     Boolean   @default(false) @map("is_current")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

// Language model for better language skill management
model Language {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  language      String    
  level         String    
  certification String?   
  description   String?   
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("languages")
}

// Reference model for professional references
model Reference {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  name          String    
  company       String    
  position      String?   
  contact       String    
  relationship  String?   
  description   String?   
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("references")
}

// New enums for ATS system
enum SeniorityLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum OptimizationLevel {
  BASIC
  ADVANCED
  COMPREHENSIVE
}


